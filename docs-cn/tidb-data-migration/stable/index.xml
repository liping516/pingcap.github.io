<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TiDB Data Migration 用户文档 on SQL at Scale</title>
    <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/</link>
    <description>Recent content in TiDB Data Migration 用户文档 on SQL at Scale</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://pingcap.com/docs-cn/tidb-data-migration/stable/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/TOC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/TOC/</guid>
      <description>TiDB Data Migration (DM) 文档 文档目录  概述  DM 架构 同步功能介绍 使用限制 DM-worker 简介 DM Relay Log   核心特性  Table Routing Black &amp;amp; White Lists Binlog Event Filter 同步延迟监控 Online-ddl-scheme   Shard Support  简介 使用限制 手动处理 Sharding DDL Lock     Benchmark  DM 1.0-GA 性能测试   使用场景  简单的从库同步场景 分库分表合并场景 分表合并数据迁移最佳实践 DM-worker 在上游 MySQL 主从间切换     快速上手   部署  部署 DM 集群  使用 DM-Ansible 使用 Binary   使用 DM 同步数据   配置  概述 DM-master 配置 DM-worker 配置 任务配置   DM 集群管理  集群操作 集群升级   DM 同步任务管理  管理数据同步任务 任务前置检查 任务状态查询 跳过或替代执行异常的 SQL 语句     监控 DM 集群   从与 MySQL 兼容的数据库迁移数据  从 MySQL/Amazon Aurora MySQL 迁移数据     DM Portal   DM 故障诊断  故障诊断 错误含义 常见错误修复     DM FAQ   版本发布历史  v1.</description>
    </item>
    
    <item>
      <title>Data Migration 常见错误修复</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/error-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/error-handling/</guid>
      <description>Data Migration 常见错误修复 本文档介绍 DM 中常见的错误以及修复方法。
常见错误说明和处理方法    错误码 错误说明 解决方法     code=10001 数据库操作异常 进一步分析错误信息和错误堆栈   code=10002 数据库底层的 bad connection 错误，通常表示 DM 到下游 TiDB 的数据库连接出现了异常（如网络故障、TiDB 重启等）且当前请求的数据暂时未能发送到 TiDB。 DM 提供针对此类错误的自动恢复。如果长时间未恢复，需要用户检查网络或 TiDB 状态。   code=10003 数据库底层 invalid connection 错误，通常表示 DM 到下游 TiDB 的数据库连接出现了异常（如网络故障、TiDB 重启、TiKV busy 等）且当前请求已有部分数据发送到了 TiDB。 DM 提供针对此类错误的自动恢复。如果未能正常恢复，需要用户进一步检查错误信息并根据具体场景进行分析。   code=10005 数据库查询类语句出错    code=10006 数据库 EXECUTE 类型语句出错，包括 DDL 和 INSERT/UPDATE/DELETE 类型的 DML。更详细的错误信息可通过错误 message 获取。错误 message 中通常包含操作数据库所返回的错误码和错误信息。    code=11006 DM 内置的 parser 解析不兼容的 DDL 时出错 可参考 Data Migration 故障诊断-处理不兼容的 DDL 语句 提供的解决方案   code=20010 处理任务配置时，解密数据库的密码出错 检查任务配置中提供的下游数据库密码是否有使用 dmctl 正确加密   code=26002 任务检查创建数据库连接失败。更详细的错误信息可通过错误 message 获取。错误 message 中包含操作数据库所返回的错误码和错误信息。 检查 DM-master 所在的机器是否有权限访问上游   code=32001 dump 处理单元异常 如果报错 msg 包含 mydumper: argument list too long.</description>
    </item>
    
    <item>
      <title>Data Migration 常见问题</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/faq/</guid>
      <description>Data Migration 常见问题 DM 是否支持同步阿里 RDS 以及其他云数据库的数据？ DM 仅支持解析标准版本的 MySQL/MariaDB 的 binlog，对于阿里云 RDS 以及其他云数据库没有进行过测试，如果确认其 binlog 为标准格式，则可以支持。
task 配置中的黑白名单的正则表达式是否支持非获取匹配（?!）？ 目前不支持，DM 仅支持 golang 标准库的正则，可以通过 re2-syntax 了解 golang 支持的正则表达式。
如果在上游执行的一个 statement 包含多个 DDL 操作，DM 是否支持同步？ DM 会尝试将包含多个 DDL 变更操作的单条语句拆分成只包含一个 DDL 操作的多条语句，但是可能没有覆盖所有的场景。建议在上游执行的一条 statement 中只包含一个 DDL 操作，或者在测试环境中验证一下，如果不支持，可以给 DM 提 issue。
如何处理不兼容的 DDL 语句？ 你需要使用 dmctl 手动处理 TiDB 不兼容的 DDL 语句（包括手动跳过该 DDL 语句或使用用户指定的 DDL 语句替换原 DDL 语句，详见跳过或替代执行异常的 SQL 语句）。
 注意：
TiDB 目前并不兼容 MySQL 支持的所有 DDL 语句。</description>
    </item>
    
    <item>
      <title>Data Migration 故障诊断</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/troubleshoot-dm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/troubleshoot-dm/</guid>
      <description>Data Migration 故障诊断 本文总结了在 DM 工具使用过程中遇到问题的诊断流程，并指引用户通过错误信息查找相应的解决方案。
如果你在运行 DM 工具时出现了错误，请尝试以下解决方案：
  执行 query-status 命令查看任务运行状态以及相关错误输出。
  查看与该错误相关的日志文件。日志文件位于 DM-master、DM-worker 部署节点上，通过 Data Migration 错误含义 获取错误的关键信息，然后查看 Data Migration 常见错误及修复以寻找相应的解决方案。
  如果该错误还没有相应的解决方案，并且你无法通过查询日志或监控指标自行解决此问题，你可以联系相关销售人员进行支持。
  一般情况下，错误处理完成后，只需使用 dmctl 重启任务即可。
 resume-task ${task name}   但在某些情况下，你还需要重置数据同步任务。有关何时需要重置以及如何重置，详见重置数据同步任务。</description>
    </item>
    
    <item>
      <title>Data Migration 简介</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/overview/</guid>
      <description>Data Migration 简介 TiDB Data Migration (DM) 是一体化的数据同步任务管理平台，支持从 MySQL 或 MariaDB 到 TiDB 的全量数据迁移和增量数据同步。使用 DM 工具有利于简化错误处理流程，降低运维成本。
 注意：
DM 以 SQL 语句的形式将数据同步到 TiDB 中，因此各个版本的 DM 都分别兼容所有版本的 TiDB。在生产环境中，推荐使用 DM 的最新已发布版本。已发布版本的下载方式参见 DM 下载链接。
 DM 架构 DM 主要包括三个组件：DM-master，DM-worker 和 dmctl。
DM-master DM-master 负责管理和调度数据同步任务的各项操作。
 保存 DM 集群的拓扑信息 监控 DM-worker 进程的运行状态 监控数据同步任务的运行状态 提供数据同步任务管理的统一入口 协调分库分表场景下各个实例分表的 DDL 同步  DM-worker DM-worker 负责执行具体的数据同步任务。
 将 binlog 数据持久化保存在本地 保存数据同步子任务的配置信息 编排数据同步子任务的运行 监控数据同步子任务的运行状态  DM-worker 启动后，会自动同步上游 binlog 至本地配置目录（如果使用 DM-Ansible 部署 DM 集群，默认的同步目录为 &amp;lt;deploy_dir&amp;gt;/relay_log）。关于 DM-worker，详见 DM-worker 简介。关于 relay log，详见 DM Relay Log。</description>
    </item>
    
    <item>
      <title>Data Migration 简单使用场景</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/usage-scenario-simple-replication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/usage-scenario-simple-replication/</guid>
      <description>Data Migration 简单使用场景 本文介绍了 DM 工具的一个简单使用场景（非分库分表合并场景）：将三个上游 MySQL 实例的数据同步到一个下游 TiDB 集群中。
上游实例 假设上游结构为：
  实例 1
   Schema Tables     user information, log   store store_bj, store_tj   log messages      实例 2
   Schema Tables     user information, log   store store_sh, store_sz   log messages      实例 3</description>
    </item>
    
    <item>
      <title>Data Migration 错误说明</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/error-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/error-system/</guid>
      <description>Data Migration 错误说明 本文介绍了 Data Migration (DM) 的错误系统，以及各种错误信息的详细含义。
DM 错误系统 DM 1.0.0-GA 版本中引入了新的错误系统。该系统：
 增加了错误码机制。 增加了 class、scope、level 等错误信息。 优化了错误描述内容、错误调用链信息和调用堆栈信息。  错误系统的详细设计和实现，可参阅 RFC 文档: Proposal: Improve Error System。
错误信息示例 以下是 DM 实际输出的一条错误信息。本文根据这条信息，对各个字段作详细说明。
[code=38008:class=dm-master:scope=internal:level=high] grpc request error: rpc error: code = Unavailable desc = all SubConns are in TransientFailure, latest connection error: connection error: desc = &amp;#34;transport: Error while dialing dial tcp 172.17.0.2:8262: connect: connection refused&amp;#34; github.com/pingcap/dm/pkg/terror.(*Error).Delegate /root/code/gopath/src/github.com/pingcap/dm/pkg/terror/terror.go:267 github.com/pingcap/dm/dm/master/workerrpc.callRPC /root/code/gopath/src/github.com/pingcap/dm/dm/master/workerrpc/rawgrpc.go:124 github.com/pingcap/dm/dm/master/workerrpc.(*GRPCClient).SendRequest /root/code/gopath/src/github.com/pingcap/dm/dm/master/workerrpc/rawgrpc.go:64 github.</description>
    </item>
    
    <item>
      <title>DM 1.0-GA 性能测试报告</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/benchmark-v1.0-ga/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/benchmark-v1.0-ga/</guid>
      <description>DM 1.0-GA 性能测试报告 本报告记录了对 1.0-GA 版本的 DM 进行性能测试的目的、环境、场景和结果。
测试目的 该性能测试用于评估使用 DM 进行全量数据导入和增量数据同步的性能上限，并根据测试结果提供 DM 同步任务的参考配置。
测试环境 测试机器信息 系统信息：
   机器 IP 操作系统 内核版本 文件系统类型     172.16.4.39 CentOS Linux release 7.6.1810 3.10.0-957.1.3.el7.x86_64 ext4   172.16.4.40 CentOS Linux release 7.6.1810 3.10.0-957.1.3.el7.x86_64 ext4   172.16.4.41 CentOS Linux release 7.6.1810 3.10.0-957.1.3.el7.x86_64 ext4   172.16.4.42 CentOS Linux release 7.6.1810 3.10.0-957.1.3.el7.x86_64 ext4   172.16.4.43 CentOS Linux release 7.6.1810 3.</description>
    </item>
    
    <item>
      <title>DM 1.0.2 Release Notes</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/1.0.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/1.0.2/</guid>
      <description>DM 1.0.2 Release Notes 发版日期：2019 年 10 月 30 日
DM 版本：1.0.2
DM-Ansible 版本：1.0.2
改进提升  支持自动为 DM-worker 生成部分配置项 支持自动为数据迁移任务生成部分配置项 简化 query-status 在无参数时的默认输出 DM 直接管理到下游数据库的连接  问题修复  修复在进程启动过程中以及执行 SQL 失败时可能 panic 的问题 修复 DDL 执行超时后可能造成 sharding DDL 协调异常的问题 修复由于前置检查超时或部分 DM-worker 不可访问而不能启动数据迁移任务的问题 修复 SQL 执行失败后可能错误重试的问题  详细变更及问题修复  支持自动为 DM-worker 生成随机的 server-id 配置项 #337 支持自动为 DM-worker 生成 flavor 配置项 #328 支持自动为 DM-worker 生成 relay-binlog-name 与 relay-binlog-gtid 配置项 #318 支持根据黑白名单生成 mydumper 需要导出的表名配置项 #326 为数据迁移任务增加并发度配置项 (mydumper-thread、loader-thread 与 syncer-thread) #314 简化 query-status 在无参数时的默认输出 #340 修复 DDL 执行超时后可能造成 sharding DDL 协调异常的问题 #338 修复 DM-worker 从本地 meta 数据恢复数据迁移任务时可能 panic 的问题 #311 修复提交事务失败时可能造成 DM-worker panic 的问题 #313 修复监听端口被占用时 DM-worker 或 DM-master 启动过程中可能 panic 的问题 #301 修复对 1105 错误码的部分重试问题 #321, #332 修复对 Duplicate entry 与 Data too long for column 错误的重试问题 #313 修复在上游存在大量需要迁移的表时可能造成启动任务前置检查超时中断的问题 #327 修复部分 DM-worker 不可访问时无法启动数据迁移任务的问题 #319 修复从损坏的 relay log 恢复时可能错误更新 GTID sets 信息的问题 #339 修复 sync 处理单元计算 TPS 错误的问题 #294 DM 直接管理到下游数据库的连接 #325 提升组件内错误信息的传递方式 #320  </description>
    </item>
    
    <item>
      <title>DM 1.0.3 Release Notes</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/1.0.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/1.0.3/</guid>
      <description>DM 1.0.3 Release Notes 发版日期：2019 年 12 月 13 日
DM 版本：1.0.3
DM-Ansible 版本：1.0.3
改进提升  dmctl 支持命令式使用 支持同步 ALTER DATABASE DDL 语句 优化 DM 错误提示信息  问题修复  修复全量导入模块在暂停或退出时 data race 导致 panic 的问题 修复对下游进行重试操作时，stop-task 和 pause-task 可能不生效的问题  详细变更及问题修复  dmctl 支持命令式使用 #364 优化 DM 错误提示信息 #351 优化 query-status 命令输出内容 #357 优化 DM 不同任务类型的权限检查 #374 支持对重复引用的路由配置和过滤配置进行检查 #385 支持同步 ALTER DATABASE DDL 语句 #389 优化 DM 异常重试机制 #391 修复全量导入模块在暂停或退出时 data race 导致 panic 的问题 #353 修复对下游进行重试操作时，stop-task 和 pause-task 可能不生效的问题 #400 更新 Golang 版本至 1.</description>
    </item>
    
    <item>
      <title>DM 1.0.4 Release Notes</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/1.0.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/1.0.4/</guid>
      <description>DM 1.0.4 Release Notes 发版日期：2020 年 03 月 13 日
DM 版本：1.0.4
DM-Ansible 版本：1.0.4
改进提升  DM-portal 新增英文 UI 的支持 query-status 命令增加 --more 参数用于显示完整的同步状态信息  问题修复  修复到下游 TiDB 连接异常导致同步暂停后，resume-task 可能无法正常恢复同步的问题 修复 online DDL 执行失败后错误清理了 online DDL meta 信息而导致重启任务后无法继续正确处理 online DDL 同步的问题 修复 start-task 异常后 query-error 可能导致 DM-worker panic 的问题 修复 relay.meta 写入成功前 DM-worker 进程异常停止后，重启 DM-worker 时可能无法正确 recover relay log 文件与 relay.meta 的问题  详细变更及问题修复  DM-portal 增加支持英文 UI #480 query-status 命令增加 --more 参数用于显示完整的同步状态信息 #533 修复到下游 TiDB 连接异常导致同步暂停后，resume-task 可能无法正常恢复同步的问题 #436 修复 online DDL 执行失败后错误清理了 online DDL meta 信息而导致重启任务后无法继续正确处理 online DDL 同步的问题 #465 修复 start-task 异常后 query-error 可能导致 DM-worker panic 的问题 #519 修复 relay.</description>
    </item>
    
    <item>
      <title>DM 1.0.5 Release Notes</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/1.0.5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/1.0.5/</guid>
      <description>DM 1.0.5 Release Notes 发版日期：2020 年 4 月 27 日
DM 版本：1.0.5
DM-Ansible 版本：1.0.5
改进提升  优化了 UNIQUE KEY 对应列含 NULL 值时的增量同步速度 增加对 TiDB 返回的 Write conflict（9007 与 8005）错误的重试  问题修复  修复了全量数据导入过程中有概率触发 Duplicate entry 错误的问题 修复了全量导入完成后上游无数据写入时可能无法 stop-task/pause-task 的问题 修复 stop-task 后监控 metrics 仍有数据显示的问题  详细变更及问题修复  优化了 UNIQUE KEY 对应列含 NULL 值时的增量同步速度 #588 #597 增加对 TiDB 返回的 Write conflict（9007 与 8005）错误的重试 #632 修复了全量数据导入过程中有概率触发 Duplicate entry 错误的问题 #554 修复了全量导入完成后上游无数据写入时可能无法 stop-task/pause-task 的问题 #622 修复 stop-task 后监控 metrics 仍有数据显示的问题 #616 修复同步过程中有概率出现 Column count doesn&#39;t match value count 的问题 #624 修复了全量导入阶段从 paused 状态 resume-task 后 data file size 等部分 metrics 显示错误的问题 #570 添加与修复了多个 metrics 监控项 #590 #594  </description>
    </item>
    
    <item>
      <title>DM Portal 简介</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-portal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-portal/</guid>
      <description>DM Portal 简介 当前版本的 DM 提供了丰富多样的功能特性，包括 Table routing，Black &amp;amp; white table lists，Binlog event filter 等。但这些功能特性同时也增加了用户使用 DM 的复杂度，尤其在编写 DM 任务配置的时候。
针对这个问题，DM 提供了一个精简的网页程序 DM Portal，能够帮助用户以可视化的方式去配置需要的同步任务，并且生成可以直接让 DM 直接执行的 task.yaml 文件。
功能描述 本节简要介绍 DM Portal 的各项功能。
同步模式配置 支持 DM 的三种同步模式：
 全量同步 增量同步 All（全量+增量）  实例信息配置 支持配置库表同步路由方式，能够支持 DM 中分库分表合并的配置方式。
binlog 过滤配置 支持对数据库、数据表配置 binlog event 过滤。
配置文件生成 支持配置文件创建，能够将配置文件下载到本地并且同时会在 dm-portal 服务器的 /tmp/ 目录下自动创建。
使用限制 当前的 DM 配置可视化生成页面能够覆盖绝大部分的 DM 配置场景，但也有一定的使用限制：
 不支持 Binlog event filter 的 SQL pattern 方式 编辑功能不支持解析用户之前写的 task.</description>
    </item>
    
    <item>
      <title>DM Relay Log</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/relay-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/relay-log/</guid>
      <description>了解目录结构、初始同步规则和 DM relay log 的数据清理。</description>
    </item>
    
    <item>
      <title>DM 任务完整配置文件介绍</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/task-configuration-file-full/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/task-configuration-file-full/</guid>
      <description>DM 任务完整配置文件介绍 本文档主要介绍 Data Migration (DM) 的任务完整的配置文件 task_advanced.yaml，包含全局配置 和实例配置 两部分。
关于各配置项的功能和配置，请参阅数据同步功能。
关键概念 关于包括 source-id 和 DM-worker ID 在内的关键概念的介绍，请参阅关键概念。
完整配置文件示例 下面是一个完整的配置文件示例，通过该示例可以完成复杂的数据同步功能。
--- # ----------- 全局配置 ----------- ## ********* 基本信息配置 ********* name: test # 任务名称，需要全局唯一 task-mode: all # 任务模式，可设为 &amp;#34;full&amp;#34;、&amp;#34;incremental&amp;#34;、&amp;#34;all&amp;#34; is-sharding: true # 是否为分库分表合并任务 meta-schema: &amp;#34;dm_meta&amp;#34; # 下游储存 `meta` 信息的数据库 remove-meta: false # 是否在任务同步开始前移除该任务名对应的 `meta`（`checkpoint` 和 `onlineddl` 等）。 enable-heartbeat: false # 是否开启 `heartbeat` 功能 online-ddl-scheme: &amp;#34;gh-ost&amp;#34; # 目前仅支持 &amp;#34;gh-ost&amp;#34; 、&amp;#34;pt&amp;#34; target-database: # 下游数据库实例配置 host: &amp;#34;192.</description>
    </item>
    
    <item>
      <title>DM 任务配置文件介绍</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/task-configuration-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/task-configuration-file/</guid>
      <description>DM 任务配置文件介绍 本文档主要介绍 Data Migration (DM) 的任务基础配置文件 task_basic.yaml，包含全局配置和实例配置两部分。
完整的任务配置参见 DM 任务完整配置文件介绍。关于各配置项的功能和配置，请参阅数据同步功能。
关键概念 关于包括 source-id 和 DM-worker ID 在内的关键概念的介绍，请参阅关键概念。
基础配置文件示例 下面是一个基础的配置文件示例，通过该示例可以完成简单的数据同步功能。
--- # ----------- 全局配置 ----------- ## ********* 基本信息配置 ********* name: test # 任务名称，需要全局唯一 task-mode: all # 任务模式，可设为 &amp;#34;full&amp;#34;、&amp;#34;incremental&amp;#34;、&amp;#34;all&amp;#34; target-database: # 下游数据库实例配置 host: &amp;#34;127.0.0.1&amp;#34; port: 4000 user: &amp;#34;root&amp;#34; password: &amp;#34;&amp;#34; # 如果不为空则需经过 dmctl 加密 ## ******** 功能配置集 ********** black-white-list: # 上游数据库实例匹配的表的 black &amp;amp; white list 过滤规则集 bw-rule-1: # 黑白名单配置的名称 do-dbs: [&amp;#34;all_mode&amp;#34;] # 同步哪些库 # ----------- 实例配置 ----------- mysql-instances: - source-id: &amp;#34;mysql-replica-01&amp;#34; # 上游实例或者复制组 ID，参考 `dm-master.</description>
    </item>
    
    <item>
      <title>DM 分库分表合并场景</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/usage-scenario-shard-merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/usage-scenario-shard-merge/</guid>
      <description>DM 分库分表合并场景 本文介绍如何在分库分表合并场景中使用 Data Migration (DM)。使用场景中，三个上游 MySQL 实例的分库和分表数据需要同步至下游 TiDB 集群。
上游实例 假设上游库结构如下：
  实例 1
   Schema Tables     user information, log_north, log_bak   store_01 sale_01, sale_02   store_02 sale_01, sale_02      实例 2
   Schema Tables     user information, log_east, log_bak   store_01 sale_01, sale_02   store_02 sale_01, sale_02      实例 3</description>
    </item>
    
    <item>
      <title>DM 查询状态</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/query-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/query-status/</guid>
      <description>DM 查询状态 本文介绍 DM（Data Migration）query-status 命令的查询结果、任务状态与子任务状态。
查询结果  » query-status { &amp;#34;result&amp;#34;: true, # 查询是否成功。 &amp;#34;msg&amp;#34;: &amp;#34;&amp;#34;, # 查询失败原因描述。 &amp;#34;tasks&amp;#34;: [ # 迁移 task 列表 { &amp;#34;taskName&amp;#34;: &amp;#34;test-1&amp;#34;, # 任务名称 &amp;#34;taskStatus&amp;#34;: &amp;#34;Running&amp;#34;, # 任务运行状态，包括 “New”，“Running”，“Paused”，“Stopped”，“Finished” 以及 “Error”。 &amp;#34;workers&amp;#34;: [ # 该任务所使用的 DM-workers 列表 &amp;#34;127.0.0.1:8262&amp;#34; ] }, { &amp;#34;taskName&amp;#34;: &amp;#34;test-2&amp;#34;, &amp;#34;taskStatus&amp;#34;: &amp;#34;Error - Some error occurred in subtask&amp;#34;, # 该任务的子任务存在运行错误并暂停的现象 &amp;#34;workers&amp;#34;: [ &amp;#34;127.0.0.1:8262&amp;#34;, &amp;#34;127.0.0.1:8263&amp;#34; ] }, { &amp;#34;taskName&amp;#34;: &amp;#34;test-3&amp;#34;, &amp;#34;taskStatus&amp;#34;: &amp;#34;Error - Relay status is Error&amp;#34;, # 该任务的某个处于 Sync 阶段的子任务对应的 Relay 处理单元出错 &amp;#34;workers&amp;#34;: [ &amp;#34;127.</description>
    </item>
    
    <item>
      <title>DM 版本升级</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-upgrade/</guid>
      <description>DM 版本升级 本文档主要介绍各 DM (Data Migration) 版本间的升级操作步骤。
 注意：
 若无特殊说明，各版本的升级操作均为从前一个有升级指引的版本向当前版本升级。 若无特殊说明，各升级操作示例均假定已经下载了对应版本的 DM 和 DM-Ansible 且 DM binary 存在于 DM-Ansible 的相应目录中（下载 DM binary 可以参考更新组件版本）。 若无特殊说明，各升级操作示例均假定升级前已停止所有同步任务，升级完成后手动重新启动所有同步任务。 以下版本升级指引逆序展示。   升级到 v1.0.3 版本信息 Release Version: v1.0.3 Git Commit Hash: 41426af6cffcff9a325697a3bdebeadc9baa8aa6 Git Branch: release-1.0 UTC Build Time: 2019-12-13 07:04:53 Go Version: go version go1.13 linux/amd64 主要变更  dmctl 支持命令式使用 支持同步 ALTER DATABASE DDL 语句 优化 DM 错误提示信息 修复全量导入模块在暂停或退出时 data race 导致 panic 的问题 修复对下游进行重试操作时，stop-task 和 pause-task 可能不生效的问题  升级操作示例  下载新版本 DM-Ansible，确认 inventory.</description>
    </item>
    
    <item>
      <title>DM 监控指标</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/monitor-a-dm-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/monitor-a-dm-cluster/</guid>
      <description>介绍 DM 的监控指标</description>
    </item>
    
    <item>
      <title>DM 配置简介</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/config-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/config-overview/</guid>
      <description>DM 配置简介 本文档简要介绍 DM (Data Migration) 的配置文件和数据同步任务的配置。
配置文件  inventory.ini：使用 DM-Ansible 部署 DM 集群的配置文件。需要根据所选用的集群拓扑来进行编辑。详见编辑 inventory.ini 配置文件。 dm-master.toml：DM-master 进程的配置文件，包括 DM 集群的拓扑信息、MySQL 实例与 DM-worker 之间的关系（必须为一对一的关系）。使用 DM-Ansible 部署 DM 集群时，会自动生成 dm-master.toml 文件，各项配置说明详见 DM-master 配置文件介绍 dm-worker.toml：DM-worker 进程的配置文件，包括上游 MySQL 实例的配置和 relay log 的配置。使用 DM-Ansible 部署 DM 集群时，会自动生成 dm-worker.toml 文件，各项配置说明详见 DM-worker 配置文件介绍  同步任务配置 任务配置文件 使用 DM-Ansible 部署 DM 集群时，&amp;lt;path-to-dm-ansible&amp;gt;/conf 中提供了任务配置文件模板：task.yaml.exmaple 文件。该文件是 DM 同步任务配置的标准文件，每一个具体的任务对应一个 task.yaml 文件。关于该配置文件的详细介绍，参见 任务配置文件。
创建数据同步任务 你可以基于 task.yaml.example 文件来创建数据同步任务，具体步骤如下：
 复制 task.yaml.example 为 your_task.yaml。 参考任务配置文件来修改 your_task.</description>
    </item>
    
    <item>
      <title>DM 集群操作</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/cluster-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/cluster-operations/</guid>
      <description>DM 集群操作 本文介绍 DM 集群操作以及使用 DM-Ansible 管理 DM 集群时需要注意的事项。
启动集群 运行以下命令以启动整个集群的所有组件（包括 DM-master、DM-worker 和监控组件）：
 ansible-playbook start.yml 下线集群 运行以下命令以下线整个集群的所有组件（包括 DM-master、DM-worker 和监控组件）：
 ansible-playbook stop.yml 重启集群组件 在以下情况下，需要更新 DM 集群组件：
 您想要更新组件版本。 发生了严重的错误，您需要重启组件完成临时恢复。 DM 集群所在的机器由于某种原因重启。  重启注意事项 该部分描述重启 DM 各组件时需要了解的事项。
DM-worker 重启事项 全量数据导入过程中：
对于全量数据导入时的 SQL 文件，DM 使用下游数据库记录断点信息，DM-worker 会在本地 meta 文件记录子任务信息。DM-worker 重启时会检查断点信息和本地记录的子任务信息，重启前处于运行中状态的任务会自动恢复数据同步。
增量数据同步过程中：
对于增量数据导入过程中的 binlog，DM 使用下游数据库记录断点信息，并会在同步任务开始或恢复后的第一个五分钟之内开启安全模式。
  未启用 sharding DDL 同步
如果 DM-worker 上运行的任务未启用 sharding DDL 同步功能，DM-worker 重启时会检查断点信息和本地记录的子任务信息，重启前处于运行中状态的任务会自动恢复数据同步。
  已启用 sharding DDL 同步</description>
    </item>
    
    <item>
      <title>DM-master 配置文件介绍</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-master-configuration-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-master-configuration-file/</guid>
      <description>DM-master 配置文件介绍 本文介绍 DM-master 的配置文件，包括配置文件示例与配置项说明。
配置文件示例 DM-master 的示例配置文件如下所示：
# log configuration log-file = &amp;#34;dm-master.log&amp;#34; # DM-master listening address master-addr = &amp;#34;:8261&amp;#34; # DM-worker deployment. It will be refined when the new deployment function is available. [[deploy]] source-id = &amp;#34;mysql-replica-01&amp;#34; dm-worker = &amp;#34;172.16.10.72:8262&amp;#34; [[deploy]] source-id = &amp;#34;mysql-replica-02&amp;#34; dm-worker = &amp;#34;172.16.10.73:8262&amp;#34; 配置项说明 Global 配置    配置项 说明     log-file 日志文件，如果不配置，日志会输出到标准输出中。   master-addr DM-master 服务的地址，可以省略 IP 信息，例如：&amp;quot;:8261&amp;rdquo;。    DM-Worker 的配置 配置在 deploy 中，每一个 DM-worker 都需要设置一个 deploy。</description>
    </item>
    
    <item>
      <title>DM-worker 完整配置说明</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-worker-configuration-file-full/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-worker-configuration-file-full/</guid>
      <description>DM-worker 完整配置说明 本文完整地介绍 DM-worker 的配置，包括配置文件示例与配置项说明。
配置文件示例 # Worker Configuration. # Log configuration. log-level = &amp;#34;info&amp;#34; log-file = &amp;#34;dm-worker.log&amp;#34; # DM-worker listening address. worker-addr = &amp;#34;:8262&amp;#34; # Represents a MySQL/MariaDB instance or a replication group. source-id = &amp;#34;mysql-replica-01&amp;#34; # Server id of slave for binlog replication. # Each instance (master and slave) in the replication group should have a different server id. server-id = 101 # flavor: mysql/mariadb flavor = &amp;#34;mysql&amp;#34; # The directory used to store relay log.</description>
    </item>
    
    <item>
      <title>DM-worker 简介</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-worker-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-worker-intro/</guid>
      <description>DM-worker 简介 DM-worker 是 DM (Data Migration) 的一个组件，负责执行具体的数据同步任务。
其主要功能如下：
 注册为一台 MySQL 或 MariaDB 服务器的 slave。 读取 MySQL 或 MariaDB 的 binlog event，并将这些 event 持久化保存在本地 (relay log)。 单个 DM-worker 支持同步一个 MySQL 或 MariaDB 实例的数据到下游的多个 TiDB 实例。 多个 DM-Worker 支持同步多个 MySQL 或 MariaDB 实例的数据到下游的一个 TiDB 实例。  DM-worker 处理单元 DM-worker 任务包含如下多个逻辑处理单元。
Relay log Relay log 持久化保存从上游 MySQL 或 MariaDB 读取的 binlog，并对 binlog replication 处理单元提供读取 binlog event 的功能。
其原理和功能与 MySQL slave relay log 类似，详见 Slave Relay Log。</description>
    </item>
    
    <item>
      <title>DM-worker 配置文件介绍</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-worker-configuration-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/dm-worker-configuration-file/</guid>
      <description>DM-worker 配置文件介绍 本文档主要介绍 DM-worker 的基础配置文件。在一般场景中，用户只需要使用基础配置即可完成 DM-worker 的部署。
完整配置项参考 DM-worker 完整配置说明。
配置文件示例 # Worker Configuration. # Log configuration. log-file = &amp;#34;dm-worker.log&amp;#34; # DM-worker listen address. worker-addr = &amp;#34;:8262&amp;#34; # Represents a MySQL/MariaDB instance or a replication group. source-id = &amp;#34;mysql-replica-01&amp;#34; # Server id of slave for binlog replication. # Each instance (master and slave) in replication group should have different server id. server-id = 101 # flavor: mysql/mariadb flavor = &amp;#34;mysql&amp;#34; # The directory that used to store relay log.</description>
    </item>
    
    <item>
      <title>online-ddl-scheme 功能介绍</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/feature-online-ddl-scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/feature-online-ddl-scheme/</guid>
      <description>DM online-ddl-scheme 概述 DDL 是数据库应用中必然会使用的一类 SQL。MySQL 虽然在 5.6 的版本以后支持了 online-ddl，但是也有或多或少的限制。比如 MDL 锁的获取，某些 DDL 还是需要以 Copy 的方式来进行，在生产业务使用中，DDL 执行过程中的锁表会一定程度上阻塞数据库的读取或者写入。
因此，gh-ost 以及 pt-osc 可以更优雅地在 MySQL 上面执行 DDL，把对读写的影响降到最低。
TiDB 根据 Google F1 的在线异步 schema 变更算法实现，在 DDL 过程中并不会阻塞读写。因此，在 online-schema-change 过程中，gh-ost 和 pt-osc 所产生的大量中间表数据以及 binlog event，在 MySQL 与 TiDB 的数据同步过程中并不需要。
DM 是 MySQL 到 TiDB 的数据同步工具，online-ddl-scheme 功能就是对上述两个 online-schema-change 的工具进行特殊的处理，以便更快完成所需的 DDL 同步。
如果想从源码方面了解 DM online-ddl-scheme，可以参考 DM 源码阅读系列文章（八）Online Schema Change 同步支持
配置 online-ddl-scheme 在 task 配置文件里面与 name 同级，例子详见下面配置 Example。完整的配置及意义，可以参考 DM 完整配置文件示例：</description>
    </item>
    
    <item>
      <title>Table Selector</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/table-selector/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/table-selector/</guid>
      <description>介绍 DM 的 Table Selector</description>
    </item>
    
    <item>
      <title>TiDB Data Migration 教程</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/get-started/</guid>
      <description>TiDB Data Migration 教程 TiDB Data Migration (DM) 是一体化的数据同步任务管理平台，支持将大量、复杂的生产环境中的数据从 MySQL 或 MariaDB 迁移到 TiDB。
DM 功能如下：
 数据迁移  支持导出与导入源数据库的初始全量数据，并在数据迁移过程中读取、应用来自源数据库存储的 binlog，从而保持数据的同步。 通过合并上游的多个 MySQL 或 MariaDB 实例或集群的表，DM 能迁移生产环境中的分库分表。   将 TiDB 作为 MySQL 或 MariaDB 的从库时，DM 能持续提高数据库水平扩展的能力，或在无需 ETL 作业的情况下，在 TiDB 上进行数据实时分析。  本教程主要介绍如何使用 DM 迁移上游多个 MySQL 实例的一个分片表。包括两种场景：
 合并若干个互不冲突的表或分片，即这些表或分片的表结构并不会造成唯一键的冲突； 合并唯一键存在冲突的表。  本教程假设目前使用的是一台新的、纯净版 CentOS 7 实例，你能（使用 VMware、VirtualBox 及其他工具）在本地虚拟化或在供应商提供的平台上部署一台小型的云虚拟主机。因为需要运行多个服务，建议内存最好在 1 GB 以上。
 警告：
本教程中 TiDB 的部署方法并不适用于生产或开发环境。
 Data Migration 架构 TiDB Data Migration 平台由 3 部分组成：DM-master、DM-worker 和 dmctl。</description>
    </item>
    
    <item>
      <title>TiDB Data Migration 术语表</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/glossary/</guid>
      <description>学习 TiDB Data Migration 相关术语</description>
    </item>
    
    <item>
      <title>上游 MySQL 实例配置前置检查</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/precheck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/precheck/</guid>
      <description>上游 MySQL 实例配置前置检查 本文介绍了 DM 提供的前置检查功能，此功能用于在数据同步任务启动时提前检测出上游 MySQL 实例配置中可能存在的一些错误。
使用命令 check-task 命令用于对上游 MySQL 实例配置是否满足 DM 要求进行前置检查。
检查内容 上下游数据库用户必须具备相应读写权限。当数据同步任务启动时，DM 会自动检查下列权限和配置：
  数据库版本
 5.5 &amp;lt; MySQL 版本 &amp;lt; 8.0 MariaDB 版本 &amp;gt;= 10.1.2    MySQL binlog 配置
 binlog 是否开启（DM 要求 binlog 必须开启） 是否有 binlog_format=ROW（DM 只支持 ROW 格式的 binlog 同步） 是否有 binlog_row_image=FULL（DM 只支持 binlog_row_image=FULL）    上游 MySQL 实例用户的权限
DM 配置中的 MySQL 用户至少需要具备以下权限：
 REPLICATION SLAVE REPLICATION CLIENT RELOAD SELECT    上游 MySQL 表结构的兼容性</description>
    </item>
    
    <item>
      <title>从 MySQL 迁移数据 —— 以 Amazon Aurora MySQL 为例</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/migrate-from-mysql-aurora/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/migrate-from-mysql-aurora/</guid>
      <description>使用 DM 从 MySQL/Amazon Aurora MySQL 迁移数据。</description>
    </item>
    
    <item>
      <title>使用 DM binary 部署 DM 集群</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/deploy-a-dm-cluster-using-binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/deploy-a-dm-cluster-using-binary/</guid>
      <description>使用 DM binary 部署 DM 集群 本文将介绍如何使用 DM binary 快速部署 DM 集群。
准备工作 下载官方 binary，链接地址：DM 下载。
下载的文件中包括子目录 bin 和 conf。bin 目录下包含 dm-master、dm-worker、dmctl 以及 Mydumper 的二进制文件。conf 目录下有相关的示例配置文件。
使用样例 假设在两台服务器上部署 MySQL，在一台服务器上部署 TiDB（mocktikv 模式），另外在三台服务器上部署两个 DM-worker 实例和一个 DM-master 实例。各个节点的信息如下：
   实例 服务器地址     MySQL1 192.168.0.1   MySQL2 192.168.0.2   TiDB 192.168.0.3   DM-master 192.168.0.4   DM-worker1 192.168.0.5   DM-worker2 192.168.0.6    MySQL1 和 MySQL2 中需要开启 binlog。DM-worker1 负责同步 MySQL1 的数据，DM-worker2 负责同步 MySQL2 的数据。下面以此为例，说明如何部署 DM。</description>
    </item>
    
    <item>
      <title>使用 DM 同步数据</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/replicate-data-using-dm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/replicate-data-using-dm/</guid>
      <description>使用 DM 同步数据 本文介绍如何使用 DM (Data Migration) 同步数据。
第 1 步：部署 DM 集群 目前推荐使用 DM-Ansible 部署 DM 集群，具体部署方法参照 使用 DM-Ansible 部署 DM 集群；也可以使用 binary 部署 DM 集群用于体验或者测试，具体部署方法参照使用 DM binary 部署 DM 集群。
 注意：
 在 DM 所有的配置文件中，数据库的密码要使用 dmctl 加密后的密文。如果数据库密码为空，则不需要加密。关于如何使用 dmctl 加密明文密码，参考使用 dmctl 加密上游 MySQL 用户密码。 上下游数据库用户必须拥有相应的读写权限。   第 2 步：检查集群信息 使用 DM-Ansible 部署 DM 集群后，相关配置信息如下：
  DM 集群相关组件配置信息
   组件 主机 端口     dm_worker1 172.</description>
    </item>
    
    <item>
      <title>使用 DM-Ansible 部署 DM 集群</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/deploy-a-dm-cluster-using-ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/deploy-a-dm-cluster-using-ansible/</guid>
      <description>使用 DM-Ansible 部署 DM 集群 DM-Ansible 是 PingCAP 基于 Ansible 的 Playbooks 研发的 DM (Data Migration) 集群部署工具。本文将介绍如何使用 DM-Ansible 快速部署 DM 集群。
准备工作 在开始之前，先确保您准备好了以下配置的机器：
  部署目标机器若干，配置如下：
 CentOS 7.3 (64-bit) 或更高版本，x86_64 架构（AMD64） 机器之间内网互通 关闭防火墙，或开放服务端口    一台中控机，配置如下：
 包含 Python 2.7 的 CentOS 7.3（64-bit）或更高版本 Ansible 2.5 或更高版本 互联网访问    第 1 步：在中控机上安装依赖包  注意：
请确保使用 root 账户登录中控机。
 根据中控机的操作系统版本，运行相应命令如下：
  CentOS 7：
 yum -y install epel-release git curl sshpass &amp;amp;&amp;amp; yum -y install python-pip   Ubuntu：</description>
    </item>
    
    <item>
      <title>分库分表合并同步</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/feature-shard-merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/feature-shard-merge/</guid>
      <description>分库分表合并同步 本文介绍了 DM 提供的分库分表合并同步功能。此功能用于将上游 MySQL/MariaDB 实例中结构相同的表同步到下游 TiDB 的同一个表中。DM 不仅支持同步上游的 DML 数据，也支持协调同步多个上游分表的 DDL 表结构变更。
 注意：
要执行分库分表合并同步任务，必须在任务配置文件中设置 is-sharding: true。
 使用限制 DM 进行分表 DDL 的同步有以下几点使用限制：
  在一个逻辑 sharding group（需要合并同步到下游同一个表的所有分表组成的 group）内，所有上游分表必须以相同的顺序执行相同的 DDL 语句（库名和表名可以不同），并且只有在所有分表执行完当前一条 DDL 语句后，下一条 DDL 语句才能执行。
 比如，如果在 table_1 表中先增加列 a 后再增加列 b，则在 table_2 表中就不能先增加列 b 后再增加列 a，因为 DM 不支持以不同的顺序来执行相同的 DDL 语句。    对于每个逻辑 sharding group，推荐使用一个独立的任务进行同步。
 如果一个任务内存在多个 sharding group，则必须等待一个 sharding group 的 DDL 语句同步完成后，才能开始对其他 sharding group 执行 DDL 语句。    在一个逻辑 sharding group 内，所有上游分表都应该执行对应的 DDL 语句。</description>
    </item>
    
    <item>
      <title>分表合并数据迁移最佳实践</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/shard-merge-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/shard-merge-best-practices/</guid>
      <description>使用 DM 对分库分表进行合并迁移时的最佳实践。</description>
    </item>
    
    <item>
      <title>切换 DM-worker 与上游 MySQL 实例的连接</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/usage-scenario-master-slave-switch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/usage-scenario-master-slave-switch/</guid>
      <description>了解如何切换 DM-worker 与上游 MySQL 实例的连接。</description>
    </item>
    
    <item>
      <title>手动处理 Sharding DDL Lock</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/feature-manually-handling-sharding-ddl-locks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/feature-manually-handling-sharding-ddl-locks/</guid>
      <description>手动处理 Sharding DDL Lock DM (Data Migration) 使用 sharding DDL lock 来确保分库分表的 DDL 操作可以正确执行。绝大多数情况下，该锁定机制可自动完成；但在部分异常情况发生时，需要使用 unlock-ddl-lock/break-ddl-lock 手动处理异常的 DDL lock。
 注意：
 不要轻易使用 unlock-ddl-lock/break-ddl-lock 命令，除非完全明确当前场景下使用这些命令可能会造成的影响，并能接受这些影响。 在手动处理异常的 DDL lock 前，请确保已经了解 DM 的分库分表合并同步原理。   命令介绍 show-ddl-locks 该命令用于查询当前 DM-master 上存在的 DDL lock 信息。
命令示例  show-ddl-locks [--worker=127.0.0.1:8262] [task-name] 参数解释   worker：
 flag 参数，string，--worker，可选 不指定时，查询所有 DM-worker 相关的 lock 信息；指定时，仅查询与这组 DM-worker 相关的 lock 信息，可重复多次指定    task-name：
 非 flag 参数，string，可选 不指定时，查询与所有任务相关的 lock 信息；指定时，仅查询特定任务相关的 lock 信息    返回结果示例  show-ddl-locks test { &amp;#34;result&amp;#34;: true, # 查询 lock 操作本身是否成功 &amp;#34;msg&amp;#34;: &amp;#34;&amp;#34;, # 查询 lock 操作失败时的原因或其它描述信息（如不存在任务 lock） &amp;#34;locks&amp;#34;: [ # DM-master 上存在的 lock 信息列表 { &amp;#34;ID&amp;#34;: &amp;#34;test-`shard_db`.</description>
    </item>
    
    <item>
      <title>数据同步功能</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/feature-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/feature-overview/</guid>
      <description>DM 提供的功能及其配置介绍</description>
    </item>
    
    <item>
      <title>管理数据同步任务</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/manage-replication-tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/manage-replication-tasks/</guid>
      <description>管理数据同步任务 本文介绍了如何使用 dmctl 组件来进行数据同步任务的管理和维护。对于用 DM-Ansible 部署的 DM 集群，dmctl 二进制文件路径为 dm-ansible/dmctl。
dmctl 支持交互模式用于人工操作，同时也支持命令模式用于脚本。
dmctl 交互模式 本部分描述了在交互模式下一些 dmctl 命令的基本用法。
dmctl 使用帮助  ./dmctl --help Usage of dmctl: -V prints version and exit -config string path to config file # 按照 DM 提供的加密方法加密数据库密码，用于 DM 的配置文件 -encrypt string encrypt plaintext to ciphertext # DM-master 访问地址，dmctl 与 DM-master 交互以完成任务管理操作 -master-addr string master API server addr -rpc-timeout string rpc timeout, default is 10m (default &amp;#34;10m&amp;#34;) 加密数据库密码 在 DM 相关配置文件中，要求必须使用经 dmctl 加密后的密码，否则会报错。对于同一个原始密码，每次加密后密码不同。</description>
    </item>
    
    <item>
      <title>跳过或替代执行异常的 SQL 语句</title>
      <link>https://pingcap.com/docs-cn/tidb-data-migration/stable/skip-or-replace-abnormal-sql-statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/docs-cn/tidb-data-migration/stable/skip-or-replace-abnormal-sql-statements/</guid>
      <description>跳过或替代执行异常的 SQL 语句 本文介绍了如何使用 DM 来处理异常的 SQL 语句。
目前，TiDB 并不完全兼容所有的 MySQL 语法（详见 TiDB 已支持的 DDL 语句）。当使用 DM 从 MySQL 同步数据到 TiDB 时，如果 TiDB 不支持对应的 SQL 语句，可能会造成错误并中断同步任务。在这种情况下，DM 提供以下两种方式来恢复同步：
  使用 dmctl 来手动跳过 (skip) 该 SQL 语句对应的 binlog event。
  使用 dmctl 来手动指定其他 SQL 语句来替代 (replace) 该 SQL 语句对应的 binlog event，并向下游执行。
  如果提前预知将要同步 TiDB 不支持的 SQL 语句，也可以使用 dmctl 来手动预设跳过/替代执行操作。当 DM 尝试将该 SQL 语句对应的 binlog event 同步到下游时，该预设的操作将自动执行，从而避免同步过程被中断。
使用限制   跳过/替代执行操作只适合用于一次性跳过/替代执行下游 TiDB 不支持执行的 SQL 语句，其它同步错误请不要使用此方式进行处理。</description>
    </item>
    
  </channel>
</rss>